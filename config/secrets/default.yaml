telegram-token: ''
# Token to access ccb through telegram
# Setup: in telegram sent the following messages to BotFather user:
# /start
# /newbot
# /<botname>
# /<arbitrary_username_ending_with_bot>
# In the reply you will get  "Use this token to access the HTTP API: 
# Paste this to telegram-token blow!
# start telegram access call 'bin/index.js'
# In telegram write message to <botname>
# eg: /ls
# This will list the contents of the dir. 
# You have full bash access from telegram.
# And thus a huge security hole!!!! Beware!

keys:
  #name of exchange can be any that is supported by ccxt
  kraken:
    #exchanges' type should be centralized, except for uniswap or any on-the-chain exchange 
    type: 'centralized'
    apiKey: ''
    secret: ''
    timeout: 30000
    enableRateLimit: true
  coinbasepro:
    type: 'centralized'
    apiKey: ''
    secret: ''
    timeout: 30000
    enableRateLimit: true
    password: ''
  binance:
    remark: ''
    type: 'centralized'
    apiKey: ''
    secret: ''
    timeout: 30000
    enableRateLimit: true
  coinbase:
    type: 'centralized'
    apiKey: ''
    secret: ''
    timeout: 30000
    enableRateLimit: true
  bitmax:
    type: 'centralized'
    apiKey: ''
    secret: ''
    timeout: 30000
    enableRateLimit: true
  bkex:
    type: 'centralized'
    apiKey: ''
    secret: ''
    timeout: 30000
    enableRateLimit: true
  okex:
    type: 'centralized'
    apiKey: ''
    secret: ''
    #okex also requires a password field
    password: ''
    timeout: 30000
    enableRateLimit: true
withdraw:
  kraken:
    EUR:
      N26:
        destination: ''
        params:
          key: ''
    ETH:
      BINANCE:
        destination: ''
        params:
          key: 'binance'
  binance:
    ENG:
      ACC1:
        destination: ''
        params:
          key: ''
    ETH:
      ACC1:
        destination: ''
        params:
          key: ''
    USDT:
      ACC1:
        destination: ''
        params:
          key: ''
  coinbasepro:
    EUR:
      REVOLUT:
        destination: ''
        params:
          payment_method_id: ''
  okex:
    ETH:
      ACC1:
        destination: ''
        params:
          fee: 0.007
          trade_pwd: ''
    USDT:
      ACC1:
        destination: ''
        params:
          fee: 0.007
          trade_pwd: ''
web3:
  etherscan: 
    # Needed for auto-downloading abi for smart contracts. 
    # You do not need to have api-key if you already have 
    # an entry for contract in './abi/' folder.
    api-key: ''
  ethgasstation: 
    # api-key required for auto gas estimation.
    # If you provide --gaslimit every time, then you 
    # do not need to fill in api-key below.
    api-key: ''
  account: 
    # List all your accounts below. 
    # Account names are arbitrary. 
    # They will be substituted with address 
    # specified at address: field.
    #you can choose any name accepted by yaml fromat
    ETH-PK-1:
      address: ''
      type: 'privatekey'
      privatekey: ''
    ETH-0: 
      address: ''
      #type: 'privatekey', if you provide private key (not safe)
      #type: 'airsign', if you use sealed phone and QR codes https://github.com/r001/airsign
      #type: 'ledger', if you use https://ledger.com cold wallet
      type: 'privatekey'
      # privatekey for address. It is not a good idea to 
      # store password in the same place as address.
      privatekey: ''
    ETH-1:
      address: ''
      type: 'airsign'
      privatekey: 'na'
    ETH-2:
      address: ''
      type: 'airsign'
      privatekey: 'na'
    ETH-3:
      address: ''
      type: 'ledger'
      derivePath: "44'/60'/0'/0"
    ETH-4:
      address: ''
      type: 'ledger'
      derivePath: "44'/60'/0'/0"
    ETH-5:
      address: ''
      type: 'ledger'
      derivePath: "44'/60'/0'/0"
  mainnet:
    aave:
      referralCode: 0
    provider:
      infura: 
        # To access ethereum you do need a provider, that is usually
        # infura. Get an api-key for free at https://infura.io
        api-key: ''
      alchemy:
        api-key: ''
    deposit:
      # deposit addresses must be in the form <upper_case_exchange_name>_<upper_case_token_name>
      # now you can issue:
      # ./ccb eth tx ETH transfer BINANCE_ETH 1.000000000000000000 --from ETH-1
      # If destination address is a deposit address, 
      # ccb will check if it can receive the token transferred. 
      # This is to avoid to send token to the wrong deposit address.
      BINANCE_ETH:
        address: ''
      BINANCE_USDT:
        address: ''
      BINANCE_CRV:
        address: ''
      BINANCE_ENG:
        address: ''
      COINBASEPRO_ETH:
        address: ''
      COINBASEPRO_DAI:
        address: ''
      COINBASEPRO_BTC:
        address: ''
      COINBASEPRO_MKR:
        address: ''
      COINBASEPRO_USDC:
        address: ''
      KRAKEN_ETH:
        address: ''
  rinkeby:
    provider:
      infura:
        api-key: ''
  kovan:
    provider:
      infura:
        api-key: ''
  ropsten:
    provider:
      infura:
        api-key: ''
