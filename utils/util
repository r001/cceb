#!/usr/bin/env node
const config = require('config')
const ccxt = require('ccxt')
var log4js = require('log4js')
const fs = require('fs')
const path = require('path')
const baseDir = __dirname + '/../'
const Web3 = require('web3')

process.env.NODE_CONFIG_DIR = (process.env.NODE_CONFIG_DIR
  ?
    process.env.NODE_CONFIG_DIR + require('path').delimiter
  :
    "") +
	baseDir + "config/" + require('path').delimiter + 
	baseDir + "config/secrets/" + require('path').delimiter +
	"../.config/cceb/" + require('path').delimiter +
	"config/radix/" 

process.env.ALLOW_CONFIG_MUTATIONS = 'true'

log4js.configure(
	{
		appenders: {
			out: {type: 'stdout', layout: {
				type: 'pattern',
				pattern: '%[[%d] [%p] [%f{1}#%l] -%] %m',
			},
			},
		},
		categories: {default: {appenders: ['out'], level: 'info', enableCallStack: true}},
	}
)

const log = log4js.getLogger()
log.level = config.get('loglevel')

function getExchange (exchangeId) {
	log.debug(`exchangeId: ${exchangeId}`)
	const ExchangeClass = ccxt[exchangeId]
	const exchangeConfig = config.get('keys.' + exchangeId)

	log.debug(`exchangeConfig: ${JSON.stringify(exchangeConfig)}`)

	if (!exchangeConfig.secretRead) {
		exchangeConfig.secret = 
			fs.readFileSync(
				path.join(
					config.get('passwordDir'),
					exchangeConfig.secret
				),
				'utf8'
			).trim()
	} 
	exchangeConfig.secretRead = true;

	return new ExchangeClass(exchangeConfig)
}

async function getPriceInOtherCurrency (exchangeName, baseToken, quoteToken) {
  const exchange1 = getExchange(exchangeName)
  const orderbook = await getOrderbook(exchange1, {limit: 5, pair: baseToken + '/' + quoteToken})
  return orderbook.asks[0][0]
}

async function getOrderbook (exchange, args) {
  const limit = args.limit ? args.limit : undefined
  return await exchange.fetchOrderBook(args.pair, limit)
}


function evalExpr (variableName, variableValue, expression, bigNumber = false) {
  const keywords = new RegExp('plus|minus|times|multipliedBy|dividedBy|div|exponentiatedBy|pow|modulo|mod|squareRoot|sqrt|absoluteValue|abs|precision|sd|decimalPlaces|dp', 'g')
	// security check expression
	const variablePattern = new RegExp(variableName, 'g')

		const check = expression.replace(variablePattern, '~')
			.replace(keywords, '~')
			.replace(/[^0-9~E*/.+()-, ]/g, '')

		log.debug(`max expression  check: ${check}`)

		log.debug(`expression expression: ${expression.replace(keywords, '~').replace(variablePattern, '~')}`)
		if (check !== expression.replace(keywords, '~').replace(variablePattern, '~')) throw new Error('Illegal characters in max expression.')

	if (expression.match(keywords) || bigNumber) {
		eval(variableName + ' = new BN(\'' + variableValue + '\')')
		log.debug('Using big number lib for expression: ' + expression)
		const maxPattern = new RegExp(variableName + '\\s*[-+*^/]|[-+*^/]\\s*' + variableName)
		if (expression.match(maxPattern)) {
			log.error(`Expression '${expression}' should not use next to ${variableName} any of '*' \
 '^' '+' '-' '+' but any of ('plus' 'minus' 'times' 'multipliedBy' \
 'dividedBy' 'div' 'exponentiatedBy' 'pow' 'modulo' 'mod' 'squareRoot' \
 'sqrt' 'absoluteValue' 'abs' 'precision' 'sd' 'decimalPlaces' 'dp'). See: http://mikemcl.github.io/bignumber.js`)

			process.exit(1)
		}

	} else {
		eval(variableName + ' = ' + variableValue)
		log.debug('Using standard math lib for expression: ' + expression)
	}
		return eval(expression)
}

function minBN (bn1, bn2) {
  if (bn1.lt(bn2)) return bn1.times(1)
  return bn2.times(1)
}

async function getWeb3 (network) {
	var web3, type, preferred = true
	try {
		let {web3:w, type:t} = await getProviders(network, preferred)
		web3 = w
		type = t
	} catch (e) {
		try {
			let {web3:w, type:t} = await getProviders(network, !preferred)
			web3 = w
			type = t
		} catch (e) {
			throw new Error(`No rpc connection.`)
		}
	}
	log.debug(`${type[web3.currentProvider.host || web3.currentProvider.url]} rpc provider used.`)
	log.debug(`${JSON.stringify(type)}`)
  return web3
}

async function getProviders (network, filter) {
  var providers = Object.keys(config.get(`web3.networks.${network}.provider`))
	var type = {}

	var web3 = await Promise.any(
		providers
		.filter(provider =>
			!filter ||
			(
				config.has(`web3.networks.${network}.provider.${provider}.preferred`) &&
				config.get(`web3.networks.${network}.provider.${provider}.preferred`)
			)
		)
		.map(async provider => {
			const providerType = config.get(`web3.networks.${network}.provider.${provider}.type`)

			web3 = new Web3(
				Web3.givenProvider ||
				new Web3.providers[providerType](
					config.get(`web3.networks.${network}.provider.${provider}.url`) +
					(
						config.has(`web3.networks.${network}.provider.${provider}.api-key`) ?
						fs.readFileSync(
							path.join(
								config.get('passwordDir'),
								config.get(`web3.networks.${network}.provider.${provider}.api-key`)
							),
							'utf8'
						).trim()
						:
						""
					)
				)
			)

			type[web3.currentProvider.host || web3.currentProvider.url] = provider
			log.debug({url: web3.currentProvider.host || web3.currentProvider.url, provider})
//			let syncing = await web3.eth.isSyncing()
//			if (syncing) {
//				throw new Error(`${web3.currentProvider.host || web3.currentProvider.url} is syncing.`)
//			}
//			log.debug({isSyncing: syncing})
			return web3
		}))

	return {web3, type}
}

module.exports = {
	getWeb3,
  evalExpr,
  getExchange,
  minBN,
  getOrderbook,
  getPriceInOtherCurrency,
}
